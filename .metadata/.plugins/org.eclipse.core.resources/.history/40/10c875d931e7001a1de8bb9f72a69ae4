package com.nordfors.microservicios.app.examenes.controllers;

//import java.util.ArrayList;
//import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

//import com.nordfors.microservicios.app.examenes.models.entity.Pregunta;
import com.nordfors.microservicios.app.examenes.services.ExamenService;
import com.nordfors.microservicios.commons.controllers.CommonController;
import com.nordfors.microservicios.commons.examenes.models.entity.Examen;

@RestController
public class ExamenController extends CommonController<Examen, ExamenService>{
	
	@PutMapping("/{id}")
	public ResponseEntity<?> editar(@RequestBody Examen examen, @PathVariable Long id){
		Optional<Examen> o = service.findById(id);
		
		if(!o.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		
		Examen examenDb = o.get();
		examenDb.setNombre(examen.getNombre());
		
		//
		// Preguntar si las preguntas existen en el json que nos estan enviando y si no existen se eliminan
//		List<Pregunta> eliminadas = new ArrayList<>();
		
//		examenDb.getPreguntas().forEach(pdb -> {
			// contains usa equals en Pregunta
//			if(!examen.getPreguntas().contains(pdb)) {
//				eliminadas.add(pdb);
//			}
//		});

		examenDb.getPreguntas()
		.stream()
		.filter(pdb -> !examen.getPreguntas().contains(pdb))
		.forEach(examenDb::removePregunta);
		
		
//		eliminadas.forEach(examenDb::removePregunta);
//		eliminadas.forEach(p -> {
			// Elimina con metodo de Examen removePregunta() + orphanRemoval
//			examenDb.removePregunta(p);
//		});
		
		// Se guardan las preguntas dejando las que no fueron eliminadas junto con las nuevas
		examenDb.setPreguntas(examen.getPreguntas());
		
		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(examenDb));
	}
	
	@GetMapping("/filtrar/{term}")
	public ResponseEntity<?> filtrar(@PathVariable String term){
		return ResponseEntity.ok(service.findByNombre(term));
	}

}
